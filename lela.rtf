[PARSER]
    Name   custom_log_parser
    Format  regex
    Regex   ^(?<timestamp>[^\s]+ [^\s]+) (?<level>[^\s]+) \[(?<component>[^\]]+)\] \((?<thread>[^\)]+)\) \[-J \[(?<details>[^\]]+)\] \| (?<message>.*) \| ref-(?<ref>[^\s,]+), duration-(?<duration>[0-9]+) ms, .*$
    Time_Key timestamp
    Time_Format %Y-%m-%d %H:%M:%S,%L%z



[PARSER]
    Name   calypso_logs
    Format regex
    Regex  (?<timestamp>[^ ]+ [^ ]+) (?<level>[^ ]+) \[(?<component>[^\]]+)\] \((?<thread>[^\)]+)\) \[-J \[(?<details>[^\]]+)\] \| task completed, id-(?<id>[0-9]+), ref-(?<ref>[^\s,]+), duration-(?<duration>[0-9]+) ms, sla-[0-9]+ ms
    Time_Key timestamp
    Time_Format %Y-%m-%d %H:%M:%S,%L
    Date_Key timestamp


PUT _ingest/pipeline/calypsoscheduler_pipeline
{
  "description": "Pipeline to parse Calypso logs",
  "processors": [
    {
      "grok": {
        "field": "message",
        "patterns": [
          "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} \\[%{DATA:component}\\] \\(%{DATA:thread}\\) \\[-J \\[%{DATA:details}\\] \\| task completed, id-%{NUMBER:id}, ref-%{DATA:ref}, duration-%{NUMBER:duration} ms, sla-%{NUMBER:sla} ms\\]"
        ]
      }
    },
    {
      "date": {
        "field": "timestamp",
        "formats": ["yyyy-MM-dd HH:mm:ss,SSS"]
      }
    },
    {
      "convert": {
        "field": "duration",
        "type": "long"
      }
    },
    {
      "convert": {
        "field": "id",
        "type": "long"
      }
    }
  ]
}



POST /calypso-logs/_doc
{
  "message": "2024-07-31 16:15:08,166+0200 INFO [com.calypso.SYSTEM.DefaultJob] (QuartzScheduler_Worker-15) [-J [] | task completed, id-361666, ref-CHECK_REAL_TIME_PRICING_MC_ENTRIES, duration-8129 ms, sla-300000 ms]"
}


2024-07-31 16:15:08,166+0200 INFO [com.calypso.SYSTEM.DefaultJob] (QuartzScheduler_Worker-15) [-J [] | task completed, id-361666, ref-CHECK_REAL_TIME_PRICING_MC_ENTRIES, duration-8129 ms, sla-300000 ms]


PUT _ingest/pipeline/grok_pipeline
{
  "description": "Pipeline pour parser les logs Calypso",
  "processors": [
    {
      "grok": {
        "field": "message",
        "patterns": [
          "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} \\[%{DATA:component}\\] \\(%{DATA:thread}\\) \\[-J \\[%{DATA:details}\\] \\| task completed, id-%{NUMBER:id}, ref-%{DATA:ref}, duration-%{NUMBER:duration} ms, sla-%{NUMBER:sla} ms\\]"
        ],
        "pattern_definitions": {
          "NUMBER": "[0-9]+"
        }
      }
    }
  ]
}




POST /calypsoscheduler_uat_calypso_161072/_doc?pipeline=grok_pipeline
{
  "message": "2024-07-31 16:15:08,166+0200 INFO [com.calypso.SYSTEM.DefaultJob] (QuartzScheduler_Worker-15) [-J [] | task completed, id-361666, ref-CHECK_REAL_TIME_PRICING_MC_ENTRIES, duration-8129 ms, sla-300000 ms]"
}



POST /_ingest/pipeline/your_pipeline_id/_simulate
{
  "docs": [
    {
      "_source": {
        "log": "2024-07-31 16:15:08,166+0200 INFO [com.calypso.SYSTEM.DefaultJob] (QuartzScheduler_Worker-15) [-J [] | task completed, id-361666, ref-CHECK_REAL_TIME_PRICING_MC_ENTRIES, duration-8129 ms, sla-300000 ms]"
      }
    }
  ]
}




POST /calypsoscheduler_uat_161072.log/_doc?pipeline=my_pipeline
{
  "log": "2024-07-31 16:15:08,166+0200 INFO [com.calypso.SYSTEM.DefaultJob] (QuartzScheduler_Worker-15) [-J [] | task completed, id-361666, ref-CHECK_REAL_TIME_PRICING_MC_ENTRIES, duration-8129 ms, sla-300000 ms]"
}


POST /_bulk?pipeline=my_pipeline
{ "index": { "_index": "calypsoscheduler_uat_161072.log" } }
{ "log": "2024-07-31 16:15:08,166+0200 INFO [com.calypso.SYSTEM.DefaultJob] (QuartzScheduler_Worker-15) [-J [] | task completed, id-361666, ref-CHECK_REAL_TIME_PRICING_MC_ENTRIES, duration-8129 ms, sla-300000 ms]" }
{ "index": { "_index": "calypsoscheduler_uat_161072.log" } }
{ "log": "2024-07-31 16:16:08,166+0200 INFO [com.calypso.SYSTEM.DefaultJob] (QuartzScheduler_Worker-16) [-J [] | task completed, id-361667, ref-OTHER_REF, duration-9000 ms, sla-300000 ms]" }


GET /calypsoscheduler_uat_161072.log/_search
{
  "_source": ["timestamp", "level", "component", "thread", "details", "message", "ref", "duration", "sla"],
  "query": {
    "match_all": {}
  }
}






POST /bigdata_bp2s_calypso/_search
{
  "query": {
    "bool": {
      "must": [
        { "match": { "log": "task completed" }},
        { "terms": { "id": [101165, 159665, 157677] }}
      ]
    }
  },
  "script_fields": {
    "duration_sec": {
      "script": {
        "lang": "painless",
        "source": """
        String log = doc['log'].value;
        int start = log.indexOf("duration=") + "duration=".length();
        int end = log.indexOf(" ms", start);
        String durationStr = log.substring(start, end);
        return Integer.parseInt(durationStr) / 1000;
        """
      }
    }
  },
  "aggs": {
    "by_ref": {
      "terms": {
        "field": "ref.keyword",
        "size": 10
      },
      "aggs": {
        "avg_duration_sec": {
          "avg": {
            "field": "duration_sec"
          }
        }
      }
    }
  },
  "size": 0
}


[PARSE]
    Name          multi_line_calypso
    Format        regex
    Regex_Firstline  ^(?<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3}\+\d{4})\s+(?<level>\w+)\s+\|(?<module>[^|]+)\]\s+\((?<task>[^)]+)\)\s+\|(?<ip>[^|]+)\|(?<message>.*)$
    Regex_Nextline   ^(?!\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3}\+\d{4}).*$
    Time_Key      time
    Time_Format   %Y-%m-%d %H:%M:%S,%L%z
    Time_Keep     On




PUT /_ingest/pipeline/my_pipeline
{
  "description": "Pipeline de traitement des logs",
  "processors": [
    {
      "grok": {
        "field": "log",
        "patterns": [
          "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} \\[%{DATA:component}\\] \\(%{DATA:thread}\\) \\[-J \\[%{GREEDYDATA:details}\\] \\| %{GREEDYDATA:message} \\| ref-%{DATA:ref}, duration-%{NUMBER:duration} ms, sla-%{NUMBER:sla} ms"
        ],
        "on_failure": [
          {
            "set": {
              "field": "grok_failure",
              "value": "{{ _ingest.on_failure_message }}"
            }
          }
        ]
      }
    }
  ]
}

GET /calypsoscheduler_uat_161072.log/_search
{
  "_source": ["timestamp", "level", "component", "thread", "details", "message", "ref", "duration", "sla"],
  "query": {
    "match_all": {}
  }
}
