Sub CopyEmailBodyToExcel()
    ' Déclaration des objets Outlook et Word
    Dim objOutlook As Outlook.Application
    Dim objMail As Outlook.MailItem
    Dim wdDoc As Object ' Word.Document pour le corps de l'email
    Dim oXLApp As Object
    Dim oXLwb As Object
    Dim oXLws As Object

    ' Obtenir l'instance d'Outlook et sélectionner l'e-mail
    Set objOutlook = GetObject(, "Outlook.Application")

    If objOutlook.ActiveExplorer.Selection.Count = 0 Then
        MsgBox "Aucun e-mail sélectionné.", vbExclamation
        Exit Sub
    End If
    
    Set objMail = objOutlook.ActiveExplorer.Selection.Item(1) ' Supposons qu'un e-mail est sélectionné

    ' Vérifier que l'objet est bien un e-mail
    If TypeName(objMail) <> "MailItem" Then
        MsgBox "L'objet sélectionné n'est pas un e-mail.", vbExclamation
        Exit Sub
    End If

    ' Ouvrir l'e-mail dans un inspecteur pour accéder au contenu
    Set wdDoc = objMail.GetInspector.WordEditor

    ' Vérifier que wdDoc est bien un document Word
    If TypeName(wdDoc) <> "Document" Then
        MsgBox "Le corps de l'e-mail n'est pas un document Word.", vbExclamation
        Exit Sub
    End If

    ' Sélectionner et copier le contenu de l'e-mail
    wdDoc.Content.Select
    wdDoc.Application.Selection.Copy ' Copier dans le presse-papier

    ' Ouvrir Excel et coller le contenu
    On Error Resume Next
    Set oXLApp = GetObject(, "Excel.Application")
    If oXLApp Is Nothing Then
        Set oXLApp = CreateObject("Excel.Application")
    End If
    On Error GoTo 0

    ' Vérifier qu'Excel est ouvert
    If oXLApp Is Nothing Then
        MsgBox "Veuillez ouvrir Excel manuellement avant d'exécuter la macro.", vbExclamation
        Exit Sub
    End If

    ' Utiliser le classeur actif
    Set oXLwb = oXLApp.ActiveWorkbook
    If oXLwb Is Nothing Then
        MsgBox "Aucun classeur n'est ouvert dans Excel.", vbExclamation
        Exit Sub
    End If

    ' Utiliser la première feuille de calcul
    Set oXLws = oXLwb.Sheets(1)

    ' Coller à partir de la cellule A1
    oXLws.Range("A1").Select
    oXLws.Paste

    MsgBox "Le contenu a été collé dans Excel."
End Sub





Sub AddApprovalButtons()
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim lastCol As Long
    Dim rngTable As Range
    Dim btn As Object
    Dim i As Long

    ' Définir la feuille active
    Set ws = ActiveSheet

    ' Trouver la dernière ligne et la dernière colonne du tableau (en supposant qu'il commence à A1)
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column

    ' Boucle à travers chaque ligne du tableau pour ajouter un bouton "Approval"
    For i = 2 To lastRow ' Suppose que la première ligne est l'en-tête
        ' Supprimer les anciens boutons (facultatif)
        On Error Resume Next
        ws.Buttons("ApprovalBtn" & i).Delete
        On Error GoTo 0
        
        ' Ajouter un bouton pour chaque ligne
        Set btn = ws.Buttons.Add(Cells(i, lastCol + 1).Left, Cells(i, lastCol + 1).Top, 80, 20)
        btn.Name = "ApprovalBtn" & i
        btn.Caption = "Approval"
        
        ' Assigner une macro pour le bouton
        btn.OnAction = "'ApprovalMacro " & i & "'"
    Next i
End Sub

' Exemple de macro pour approuver la ligne
Sub ApprovalMacro(RowNum As Long)
    MsgBox "Approval Button clicked for row: " & RowNum
End Sub
