Sub CopyFormattedEmailTableToExcel_WithoutActiveX()

    ' Déclaration des objets Outlook
    Dim objOutlook As Outlook.Application
    Dim objMail As Outlook.MailItem
    Dim objSelection As Outlook.Selection
    Dim oInspector As Outlook.Inspector
    Dim wdDoc As Object ' Word.Document for the email body
    Dim oXLApp As Object
    Dim oXLwb As Object
    Dim oXLws As Object
    Dim LastRow As Long
    Dim btn As Object

    ' Obtenir l'instance d'Outlook
    Set objOutlook = GetObject(, "Outlook.Application")
    Set objSelection = objOutlook.ActiveExplorer.Selection

    ' Vérifier s'il y a un e-mail sélectionné
    If objSelection.Count = 0 Then
        MsgBox "Veuillez sélectionner un e-mail contenant du HTML.", vbExclamation
        Exit Sub
    End If

    ' Extraire le premier e-mail de la sélection
    Set objMail = objSelection.Item(1)

    ' Ouvrir l'e-mail dans un inspecteur pour accéder à son contenu en tant que document Word
    Set oInspector = objMail.GetInspector
    Set wdDoc = oInspector.WordEditor ' Convertir le contenu en un document Word

    ' Sélectionner tout le contenu de l'e-mail
    wdDoc.Content.Select
    wdDoc.Application.Selection.Copy ' Copier le contenu sélectionné (formaté) dans le presse-papiers

    ' Obtenir l'instance d'Excel ou en créer une
    On Error Resume Next
    Set oXLApp = GetObject(, "Excel.Application")
    If oXLApp Is Nothing Then
        Set oXLApp = CreateObject("Excel.Application")
    End If
    On Error GoTo 0

    ' Vérifier si Excel est ouvert
    If oXLApp Is Nothing Then
        MsgBox "Veuillez ouvrir Excel manuellement avant d'exécuter la macro.", vbExclamation
        Exit Sub
    End If

    ' Utiliser le classeur actif
    Set oXLwb = oXLApp.ActiveWorkbook
    If oXLwb Is Nothing Then
        MsgBox "Aucun classeur n'est ouvert dans Excel.", vbExclamation
        Exit Sub
    End If

    ' Utiliser la première feuille du classeur actif
    Set oXLws = oXLwb.Sheets(1)

    ' Coller le contenu formaté de l'e-mail directement dans Excel
    oXLws.Paste

    ' Rendre Excel visible pour l'utilisateur
    oXLApp.Visible = True

    ' Pauser pour permettre le collage du contenu
    Application.Wait Now + TimeValue("00:00:02")

    ' Sélectionner la cellule A1 pour s'assurer que le collage est terminé
    oXLws.Range("A1").Select

    ' Vérification : Afficher un message pour confirmer si le collage a fonctionné
    If oXLws.Cells(1, 1).Value = "" Then
        MsgBox "Aucune donnée trouvée dans la cellule A1. Vérifiez si l'e-mail contient un tableau HTML.", vbExclamation
        Exit Sub
    End If

    ' Nouvelle méthode pour trouver la dernière ligne de toute la feuille (non limitée à la colonne A)
    LastRow = oXLws.Cells.Find("*", SearchOrder:=xlByRows, SearchDirection:=xlPrevious).Row

    ' Vérification : Afficher la dernière ligne trouvée
    MsgBox "Dernière ligne trouvée : " & LastRow, vbInformation

    ' Ajouter un bouton "Approval" dans chaque ligne de la colonne B
    Dim i As Long
    For i = 2 To LastRow ' Commencer à la ligne 2 pour éviter l'entête
        Set btn = oXLws.Buttons.Add(oXLws.Cells(i, 2).Left, oXLws.Cells(i, 2).Top, oXLws.Cells(i, 2).Width, oXLws.Cells(i, 2).Height)
        With btn
            .Caption = "Approval"
            .OnAction = "'" & ThisWorkbook.Name & "'!ApprovalButton_Click" ' Lier à la fonction ApprovalButton_Click
        End With
    Next i

    ' Message de confirmation
    MsgBox "Le tableau formaté a été collé dans Excel avec succès, et des boutons d'approbation ont été ajoutés.", vbInformation

End Sub

' Macro appelée lorsque le bouton "Approval" est cliqué
Sub ApprovalButton_Click()
    MsgBox "Le bouton d'approbation a été cliqué pour cette ligne.", vbInformation
End Sub
