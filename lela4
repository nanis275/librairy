Sub CopyFormattedEmailTableToExcel_WithoutActiveX()

    ' Déclaration des objets Outlook
    Dim objOutlook As Outlook.Application
    Dim objMail As Outlook.MailItem
    Dim objSelection As Outlook.Selection
    Dim oInspector As Outlook.Inspector
    Dim wdDoc As Object ' Word.Document for the email body
    Dim oXLApp As Object
    Dim oXLwb As Object
    Dim oXLws As Object

    ' Obtenir l'instance d'Outlook
    On Error Resume Next
    Set objOutlook = GetObject(, "Outlook.Application")
    On Error GoTo 0

    If objOutlook Is Nothing Then
        MsgBox "Outlook n'est pas en cours d'exécution.", vbExclamation
        Exit Sub
    End If

    ' Obtenir la sélection d'e-mails
    Set objSelection = objOutlook.ActiveExplorer.Selection

    ' Vérifier s'il y a un e-mail sélectionné
    If objSelection.Count = 0 Then
        MsgBox "Veuillez sélectionner un e-mail contenant du HTML.", vbExclamation
        Exit Sub
    End If

    ' Extraire le premier e-mail de la sélection
    Set objMail = objSelection.Item(1)

    ' Ouvrir l'e-mail dans un inspecteur pour accéder à son contenu en tant que document Word
    Set oInspector = objMail.GetInspector
    Set wdDoc = oInspector.WordEditor ' Convertir le contenu en un document Word

    ' Vérifier si le contenu Word est accessible
    If wdDoc Is Nothing Then
        MsgBox "Impossible d'accéder au contenu de l'e-mail.", vbExclamation
        Exit Sub
    End If

    ' Sélectionner et copier le contenu de l'e-mail
    wdDoc.Content.Select
    wdDoc.Application.Selection.Copy ' Copier le contenu sélectionné (formaté) dans le presse-papiers

    ' Obtenir l'instance d'Excel ou en créer une
    On Error Resume Next
    Set oXLApp = GetObject(, "Excel.Application")
    If oXLApp Is Nothing Then
        Set oXLApp = CreateObject("Excel.Application")
    End If
    On Error GoTo 0

    ' Vérifier si Excel est ouvert
    If oXLApp Is Nothing Then
        MsgBox "Veuillez ouvrir Excel manuellement avant d'exécuter la macro.", vbExclamation
        Exit Sub
    End If

    ' Ouvrir le fichier Excel existant
    On Error Resume Next
    Set oXLwb = oXLApp.Workbooks.Open("\\londata001.uk.net.intra\Infdata\MIGRATED\tmp\irgetr\RNfulldata12.xlsm")
    If oXLwb Is Nothing Then
        MsgBox "Impossible d'ouvrir le fichier Excel.", vbExclamation
        Exit Sub
    End If
    On Error GoTo 0

    ' Utiliser la première feuille du classeur
    Set oXLws = oXLwb.Sheets(1)

    ' Effacer tout le contenu de la feuille
    oXLws.Cells.Clear

    ' Se placer sur la cellule A1
    oXLws.Range("A1").Select

    ' Coller le contenu formaté de l'e-mail directement dans Excel
    oXLws.PasteSpecial

    ' Rendre Excel visible pour l'utilisateur
    oXLApp.Visible = True

    ' Message de confirmation
    MsgBox "Le tableau formaté a été collé dans Excel avec succès.", vbInformation

End Sub



Sub CopyFormattedEmailTableToExcel_WithoutActiveX()

    ' Déclaration des objets Outlook
    Dim objOutlook As Outlook.Application
    Dim objMail As Outlook.MailItem
    Dim objSelection As Outlook.Selection
    Dim oInspector As Outlook.Inspector
    Dim wdDoc As Object ' Word.Document for the email body
    Dim oXLApp As Object
    Dim oXLwb As Object
    Dim oXLws As Object
    Dim filePath As String

    ' Obtenir l'instance d'Outlook
    Set objOutlook = GetObject(, "Outlook.Application")
    Set objSelection = objOutlook.ActiveExplorer.Selection

    ' Vérifier s'il y a un e-mail sélectionné
    If objSelection.Count = 0 Then
        MsgBox "Veuillez sélectionner un e-mail contenant du HTML.", vbExclamation
        Exit Sub
    End If

    ' Extraire le premier e-mail de la sélection
    Set objMail = objSelection.Item(1)

    ' Ouvrir l'e-mail dans un inspecteur pour accéder à son contenu en tant que document Word
    Set oInspector = objMail.GetInspector
    Set wdDoc = oInspector.WordEditor ' Convertir le contenu en un document Word

    ' Sélectionner tout le contenu de l'e-mail
    wdDoc.Content.Select
    wdDoc.Application.Selection.Copy ' Copier le contenu sélectionné (formaté) dans le presse-papiers

    ' Obtenir l'instance d'Excel ou en créer une
    On Error Resume Next
    Set oXLApp = GetObject(, "Excel.Application")
    If oXLApp Is Nothing Then
        Set oXLApp = CreateObject("Excel.Application")
    End If
    On Error GoTo 0

    ' Vérifier si Excel est ouvert
    If oXLApp Is Nothing Then
        MsgBox "Veuillez ouvrir Excel manuellement avant d'exécuter la macro.", vbExclamation
        Exit Sub
    End If

    ' Spécifier le chemin du fichier Excel que vous voulez ouvrir
    filePath = "C:\chemin\vers\votre\fichier.xlsx" ' Remplacez par le chemin réel du fichier Excel

    ' Ouvrir le fichier Excel spécifique
    Set oXLwb = oXLApp.Workbooks.Open(filePath)

    ' Utiliser la première feuille du classeur ouvert
    Set oXLws = oXLwb.Sheets(1)

    ' Effacer dynamiquement l'ancien contenu du tableau avant de coller le nouveau
    oXLws.Cells.Clear ' Efface tout le contenu de la feuille de calcul

    ' Se placer sur la cellule A1
    oXLws.Range("A1").Select

    ' Coller le contenu formaté de l'e-mail directement dans Excel
    oXLws.Paste

    ' Message de confirmation
    MsgBox "Le tableau formaté a été collé dans Excel avec succès.", vbInformation

End Sub


SELECT servicenow.change_request as sn LEFT JOIN servicenow.sysapproval_approver as ap on sn.number = ap.sysapproval_display', " WHERE (( UPPER(assignment_group_display) LIKE UPPER('%BNPP_CIB_UK_GM ES ICET TS_SDM%') 
OR UPPER(assignment_group_display) LIKE UPPER('%BNPP_CIB_UK_GM ES ICET AP_SDM%') ) OR ( UPPER(cmdb_ci_display)
LIKE UPPER('%NIGHTHAWK%') OR UPPER(cmdb_ci_display) LIKE UPPER('%VULCAN%') )) AND ( UPPER(cmdb_ci_display) NOT LIKE UPPER('%LYNX%') AND UPPER(cmdb_ci_display) NOT LIKE UPPER('%Credit%') AND UPPER(cmdb_ci_display) NOT LIKE UPPER('%JAG%')
 AND UPPER(cmdb_ci_display) NOT LIKE UPPER('%QUARTZC%') AND UPPER(cmdb_ci_display) NOT LIKE UPPER('%CRDION%') AND UPPER(cmdb_ci_display) NOT LIKE UPPER('%OMEGA%') ) AND ( ( sn.start_date != '' AND sn.start_date > '2024-10-18 15:28:27') OR (work_start != '' AND work_start > '2024-10-18 15:28:27') OR ( work_end != '' AND work_end > '2024-10-18 15:28:27')) AND ( ( sn.start_date != '' AND sn.start_date < '2024-10-18 18:28:27') OR (work_start != '' AND work_start < '2024-10-18 18:28:27') OR ( work_end != '' AND work_end > '2024-10-18 18:28:27')) AND ap.approver = '4ddcb837db78d41003ee4dc2ba9619be','number, short_description, description, cmdb_ci_display, sn.start_date, sn.end_date, justification, implementation_plan, risk_impact_analysis, backout_plan, test_plan, phase, close_code, state_display, assignment_group_display, assigned_to_display, approval, business_service_display, comments_and_work_notes_display, 
requested_by_display, location_display, category, opened_by_display, requested_by_display, closed_at, work_start, work_end, approval_history_display, sn.sys_id, ap.sys_id as sys_id_approval', '300']

SELECT number, short_description, description, cmdb_ci_display, start_date, end_date, justification, implementation_plan, risk_impact_analysis, backout_plan, test_plan, phase, close_code, state_display, assignment_group_display, assigned_to_display, approval, business_service_display, comments_and_work_notes_display, requested_by_display, location_display, category, opened_by_display, requested_by_display, closed_at, work_start, work_end, approval_history_display, sys_id FROM servicenow.change_request WHERE (( UPPER(assignment_group_display) LIKE UPPER('%BNPP_CIB_UK_GM ES ICET TS_SDM%') OR UPPER(assignment_group_display) LIKE UPPER('%BNPP_CIB_UK_GM ES ICET AP_SDM%') )  OR ( UPPER(cmdb_ci_display) LIKE UPPER('%NIGHTHAWK%') OR UPPER(cmdb_ci_display) LIKE UPPER('%VULCAN%') )) AND ( UPPER(cmdb_ci_display) NOT LIKE UPPER('%LYNX%') AND UPPER(cmdb_ci_display) NOT LIKE UPPER('%Credit%') AND UPPER(cmdb_ci_display) NOT LIKE UPPER('%JAG%') AND UPPER(cmdb_ci_display) NOT LIKE UPPER('%QUARTZC%') AND UPPER(cmdb_ci_display) NOT LIKE UPPER('%CRDION%') AND UPPER(cmdb_ci_display) NOT LIKE UPPER('%OMEGA%') ) AND ( ( start_date != '' AND start_date > '2024-10-21 06:21:30') OR (work_start != '' AND work_start > '2024-10-21 06:21:30') OR ( work_end != '' AND work_end > '2024-10-21 06:21:30')) AND ( ( start_date != '' AND start_date < '2024-10-22 01:21:30') OR (work_start != '' AND work_start < '2024-10-22 01:21:30') OR ( work_end != '' AND work_end > '2024-10-22 01:21:30')) LIMIT 75












SELECT 
    sn.number, 
    sn.short_description, 
    sn.description, 
    sn.cmdb_ci_display, 
    sn.start_date, 
    sn.end_date, 
    sn.justification, 
    sn.implementation_plan, 
    sn.risk_impact_analysis, 
    sn.backout_plan, 
    sn.test_plan, 
    sn.phase, 
    sn.close_code, 
    sn.state_display, 
    sn.assignment_group_display, 
    sn.assigned_to_display, 
    sn.approval, 
    sn.business_service_display, 
    sn.comments_and_work_notes_display, 
    sn.requested_by_display, 
    sn.location_display, 
    sn.category, 
    sn.opened_by_display, 
    sn.requested_by_display, 
    sn.closed_at, 
    sn.work_start, 
    sn.work_end, 
    sn.approval_history_display, 
    sn.sys_id, 
    ap.sys_id AS sys_id_approval
FROM 
    servicenow.change_request AS sn
LEFT JOIN 
    servicenow.sysapproval_approver AS ap 
    ON sn.number = ap.sysapproval_display
WHERE 
    (
        UPPER(sn.assignment_group_display) LIKE UPPER('%BNPP_CIB_UK_GM ES ICET TS_SDM%') 
        OR UPPER(sn.assignment_group_display) LIKE UPPER('%BNPP_CIB_UK_GM ES ICET AP_SDM%')
    )
    OR (
        UPPER(sn.cmdb_ci_display) LIKE UPPER('%NIGHTHAWK%') 
        OR UPPER(sn.cmdb_ci_display) LIKE UPPER('%VULCAN%')
    )
    AND UPPER(sn.cmdb_ci_display) NOT LIKE UPPER('%LYNX%')
    AND UPPER(sn.cmdb_ci_display) NOT LIKE UPPER('%Credit%')
    AND UPPER(sn.cmdb_ci_display) NOT LIKE UPPER('%JAG%')
    AND UPPER(sn.cmdb_ci_display) NOT LIKE UPPER('%QUARTZC%')
    AND UPPER(sn.cmdb_ci_display) NOT LIKE UPPER('%CRDION%')
    AND UPPER(sn.cmdb_ci_display) NOT LIKE UPPER('%OMEGA%')
    AND (
        (sn.start_date IS NOT NULL AND sn.start_date > '2024-10-21 06:21:30')
        OR (sn.work_start IS NOT NULL AND sn.work_start > '2024-10-21 06:21:30')
        OR (sn.work_end IS NOT NULL AND sn.work_end > '2024-10-21 06:21:30')
    )
    AND (
        (sn.start_date IS NOT NULL AND sn.start_date < '2024-10-22 01:21:30')
        OR (sn.work_start IS NOT NULL AND sn.work_start < '2024-10-22 01:21:30')
        OR (sn.work_end IS NOT NULL AND sn.work_end > '2024-10-22 01:21:30')
    )
    AND ap.approver = '4ddcb837db78d41003ee4dc2ba9619be'
LIMIT 300;



import ast
import datetime
import re

def release_note_request(assignment_groups="", added_cis="*", removed_cis="*", since_hours=24, until_hours=2, limit="50", states="*", approver=''):
    # Release note format for changes on assignment_groups or added_cis, removing removed_cis (grouped by CIs)
    if not assignment_groups and not added_cis:
        return "[ERROR] No Assignment group or CIs Found"

    conditions = ""

    # Handling Assignment Groups
    if assignment_groups:
        if isinstance(assignment_groups, str):
            if len(assignment_groups) < 2:
                return "[ERROR] Assignment Group criteria not correct"
            elif assignment_groups[0] == "[" and assignment_groups[-1] == "]":
                try:
                    groups = ast.literal_eval(assignment_groups)
                except Exception:
                    return "[ERROR] Assignment Group criteria not correct"
            else:
                try:
                    groups = assignment_groups.split(",")
                except Exception:
                    return "[ERROR] Assignment Group criteria not correct"
        else:
            return "[ERROR] Assignment Group criteria not correct"

        conditions += "(("
        for group in groups:
            conditions += " UPPER(sn.assignment_group_display) LIKE UPPER('%" + group.strip() + "%') OR"
        conditions = conditions[:-2] + ")) AND "

    # Handling Added CIs
    if added_cis:
        if isinstance(added_cis, str):
            if len(added_cis) < 2:
                return "[ERROR] Added CIs criteria not correct"
            elif added_cis[0] == "[" and added_cis[-1] == "]":
                try:
                    added_cis = ast.literal_eval(added_cis)
                except Exception:
                    return "[ERROR] Added CIs criteria not correct"
            else:
                try:
                    added_cis = added_cis.split(",")
                except Exception:
                    return "[ERROR] Added CIs criteria not correct"
        else:
            return "[ERROR] Added CIs criteria not correct"

        conditions += "("
        for ci in added_cis:
            conditions += " UPPER(sn.cmdb_ci_display) LIKE UPPER('%" + ci.strip() + "%') OR"
        conditions = conditions[:-2] + ") AND "

    # Handling Removed CIs
    if removed_cis:
        if isinstance(removed_cis, str):
            if len(removed_cis) < 2:
                return "[ERROR] Removed CIs criteria not correct"
            elif removed_cis[0] == "[" and removed_cis[-1] == "]":
                try:
                    removed_cis = ast.literal_eval(removed_cis)
                except Exception:
                    return "[ERROR] Removed CIs criteria not correct"
            else:
                try:
                    removed_cis = removed_cis.split(",")
                except Exception:
                    return "[ERROR] Removed CIs criteria not correct"
        else:
            return "[ERROR] Removed CIs criteria not correct"

        conditions += "("
        for ci in removed_cis:
            conditions += " UPPER(sn.cmdb_ci_display) NOT LIKE UPPER('%" + ci.strip() + "%') AND"
        conditions = conditions[:-4] + ") AND "

    # Handling States
    if states:
        if isinstance(states, str):
            if len(states) < 2:
                return "[ERROR] State criteria not correct"
            elif states[0] == "[" and states[-1] == "]":
                try:
                    states = ast.literal_eval(states)
                except Exception:
                    return "[ERROR] State criteria not correct"
            else:
                try:
                    states = states.split(",")
                except Exception:
                    return "[ERROR] State criteria not correct"

        conditions += "("
        for state in states:
            conditions += " sn.state_display = '" + state.strip() + "' OR"
        conditions = conditions[:-3] + ") AND "

    # Date Filtering
    min_date = datetime.datetime.strftime(
        (datetime.datetime.now(datetime.timezone.utc) - datetime.timedelta(hours=int(since_hours))),
        "%Y-%m-%d %H:%M:%S"
    )
    max_date = datetime.datetime.strftime(
        (datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(hours=int(until_hours))),
        "%Y-%m-%d %H:%M:%S"
    )
    conditions += "((sn.start_date >= '" + min_date + "' OR sn.work_start >= '" + min_date + "' OR sn.work_end >= '" + min_date + "')"
    conditions += " AND (sn.start_date <= '" + max_date + "' OR sn.work_start <= '" + max_date + "' OR sn.work_end <= '" + max_date + "')) AND "

    # Add approver condition
    if approver:
        conditions += "ap.approver = '" + approver + "' AND "

    # Remove trailing AND
    if conditions.endswith(" AND "):
        conditions = conditions[:-5]

    # The function only returns the conditions and limit
    return conditions, limit
